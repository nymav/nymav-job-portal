generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Job {
  id                String      @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  title             String
  description       String?
  short_description String?
  imageUrl          String?
  isPublished       Boolean     @default(false)
  tags              String[]
  savedUsers        String[]
  shiftTiming       String?
  hourlyRate        String?
  yearsOfExperience String?
  workMode          String?
  categoryId        String?     @db.ObjectId
  companyId         String?     @db.ObjectId

  category          Category?   @relation(fields: [categoryId], references: [id])
  company           Company?    @relation(fields: [companyId], references: [id])
  appliedJobs       AppliedJob[] // reverse relation

  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @default(now())

  @@index([categoryId])
  @@index([companyId])
  @@fulltext([title])
}

model Company {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  userId         String
  name           String
  description    String?
  mail           String?
  website        String?
  linkedIn       String?
  address_line_1 String?
  address_line_2 String?
  city           String?
  state          String?
  zipcode        String?

  jobs           Job[]
  followers      String[]
  overview       String?
  whyJoinUs      String?

  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
}

model Category {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  jobs      Job[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model UserProfile {
  userId         String       @id @map("_id") // Use String, no @db.String needed here
  fullName       String?
  email          String?
  contact        String?
  appliedJobs    AppliedJob[]
  resumes        Resumes[]
  activeResumeId String?
}

model AppliedJob {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  jobId        String      @db.ObjectId
  userId       String
  appliedAt    DateTime    @default(now())

  job          Job         @relation(fields: [jobId], references: [id])
  userProfile  UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Resumes {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  url            String
  userProfileId  String
  userProfile    UserProfile  @relation(fields: [userProfileId], references: [userId], onDelete: Cascade)

  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())

  @@index([userProfileId], name: "idx_userProfileId")
}